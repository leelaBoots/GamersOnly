dotnet angular web app notes:

location:
/c/Users/BryanJohnson/DotnetApp7/    (dotnet version 7)

fake user logins name is lowercase, password is "Pa$$w0rd"

admin username is: Admin

cloudinary movecotton/Savemyimages

docker  macross2/Containmydb!
fly.io  bjohnson@talisys.com/

fly.io credentials:
Username:    postgres
Password:    UiueHpBIZRFBF5t
Hostname:    silent-snowflake-5507-db.internal
Flycast:     fdaa:2:40d5:0:1::2
Proxy port:  5432
Postgres port:  5432
Connection string: postgres://postgres:UiueHpBIZRFBF5t@silent-snowflake-5507-db.flycast:5432
  
DATABASE_URL=postgres://silent_snowflake_5507:w6O8YWAnOH1lfpx@silent-snowflake-5507-db.flycast:5432/silent_snowflake_5507?sslmode=disable
Postgres cluster silent-snowflake-5507-db is now attached to silent-snowflake-5507

jwt.ms (website to view contents of a token)

NOTE ON RUNNING:
development locally: dotnet watch run on 5001 and ng serve on 4200. https://localhost:4200

production locally: ng build. creates an angular production build. then dotnet run.  https://localhost:5001

production Fly.io: use docker to create an image. load the image in fly.io and do fly deploy. it will give you a live url

production: setup git action to automatically deploy to fly.io when ever code is pushed to the main branch. NOTE: we still must run "ng build" manually whenever angular app is updated, before pushing code changes!!!

*** SECTION 1 *** INTRO

LESSONS 1-3:
  Technologies overview:
  ASP.NET CORE v5.0.104 
    upgraded to ASP.NET CORE v6.0.303
  Upraded to Dotnet7 2/24/2023
    .NET SDK 7.0.200
    .NET Runtime 7.0.3
    ASP.NET Core Runtime 7.0.3
    .NET Windows Desktop Runtime 7.0.3

  MS Entity Framework v7.0.3
  Angular v 11.2.11
  --
  HTML5
  CSS3
  NODE.JS v 14.16.1
  npm v 6.14.12
  ngx BOOTSTRAP v 5.2.3
  SQLite
  git
  
  get "demo" token: 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

  Install
  dotnet, Node JS, Visual Studio Code, DbBrowser SQLite, Postman, Visual Studio Community 2022
  
  eslint@8.16.0
  
LESSON 4: Source Code
  https://github.com/trycatchlearn/datingapp
  
  
*** SECTION 2 ***    Walking Skeleton

LESSON 5: Intro

LESSON 6:
  (Build a WALKING SKELETON, create project)
  Open cmd line.
  > dotnet --info
  > dontnet new -h  (lists all the TEMPLATE types. there is one for ANGULAR. but we will just use WEBAPI, to keep API separate from angular project)
  
  > dotnet new sln  (creates a solution file with the name of the containing folder, can be opened in IDE)

  > dotnet new webapi -o API     (creates the project and new folder)
  
  > dotnet sln add API     (adds the project to the solution)

LESSON 7:   XXX
  (install VS Code extensions)
  DemoAppAPI> code .  (this will open up the project in VS Code, if it doesn't work, you need to add VS code to the path in your windows environment)

  In VS Code we need to install some extensions to make dotnet app development easier.
  1. C# for Visual Studio Code powered by OmniSharp (sytax highlight, intelliSense, debugger etc.)
     click Yes in pop up to add assets to DemoApp project
  2. C# Extensions by JosCreativ
  3. Material Icon Theme
  
  In VS code, exclude the obj and bin folder, because we never need to use them as we develop
  
  shortcuts:
  
  Ctrl + P (Search for files in project)
  Ctrl + Shift + P (Opens command palette. Show all commands, and a command prompt. Can find the SQLite DB viewer here)
  >Reload Window (this will reload the window and show that the extensions are now enabled)
  Ctrl ` (opens terminal window in VS code at bottom)
  
LESSON 8:
  > dotnet watch run  (adds file watcher)
  
LESSON 9:
  Create Entities in API folder
  Create New C# class called AppUser
  
LESSON 10: Intro to EntityFramework

LESSON 11:
  Add Nuget Gallery extensions
  Ctrl Shift P > Nuget Gallery
  Install MicrosoftEntityFramework.Sqlite 5.0.2 ( choose the one that matches dotnet core runtime version)
  
LESSON 12: Adding DbContext class
 
LESSON 13. Creating the Connection string
  changed settings in VSCode.
  1. search settings for "private". include an _ as a prefix for private variables.
  2. search C# extenesion settings for "this". disable the auto generated CTOR option
  
  Go to nuget packages website and search for "dotnet-ef"
  Run this in terminal:
  dotnet tool install --global dotnet-ef --version 5.0.2
  version should match version of dotnet installed above.
  
  open Command Palette and go to nuget gallery (Ctrl-SHirt-P)
  install:
  Microsoft.EntityFrameworkCore.Design v 5.0.1
  
LESSON 14. Creating the database using Entity Framework Code first migrations
  In terminal in API/ directory run:
  API> dotnet ef datbase update
  install SqLite via the vscode extensions marketplace
  From the command palette run: SQLite: Open Database and choose datingapp.db
  From SQLite Explorer within VSCode explorer, rigth click users and choose New Query(Insert)
  Write some sql commands to insert 3 users into the Users table
  
LESSON 15. Adding a new API Controller
  In Controllers directory, Create C# Class called UsersController
  
LESSON  16. Making our code Asynchronous
  In the UserController, make the getUser and getUsers methods async to handle long querries to the database.
  
LESSON 17. Saving our code into Source control
  In the DatingApp/ directory, run > git init
  also run > dotnet new gitignore
  this creates a gitignore file and automatically adds files suchs as bin folders etc.
  add appsettings.json to the gitignore file. this file is where we will safely store keys
  git config --global user.email "bjohnson@talisys.com"
  git config --global user.name "bjohnson"
  login into bitbucket (bjohnson@talisys.com) and create a DatingApp repository
  push changes to the new repository
  
Section 3: Building a walking skeleton Part Two - Angular
  
LESSON 20. Creating the Angular application
  Install latest version of Angular CLI
  DatingApp> npm install -g @angular/cli
  DatingApp> ng new client        (client will be the name of the angular project directory, always use lowercase)
  
LESSON 21. Running the angular project and reviewing the bootstrap of the app
  client> ng serve
  go to localhost/4200
  
LESSON 22. Adding VS Code extensions to work with Angular
  Angular Language Service
  Angular Snippets
  Bracket Pair Colorizer 2
  
LESSON 23. Making HTTP requests in Angular
  app.module.ts, import HttpClientModule
  app.component.ts, define a getUsers method that will make a get request to the API
  
LESSON 24. Adding CORS support in the API
  API> startup.cs
  AddCors to prevent cross origin errors when our front end hits the api
  
LESSON 25. Displaying the fetched users in the browser
  in app.component.html, user the *ngFor directive to display user id and name on front-end
  
LESSON 26. Adding bootstrap and font-awesome
  client> ng add ngx-bootstrap
  had to run: 
  npm uninstall @schematics/angular
  npm install @schematics/angular@9.1.0
  (to avoid errors during bootstrap install)
  npm install font-awesome
  
LESSON 28. Using HTTPS in angular - WINDOWS
  Install ssl certificate from the StudentAssets folder
  1. update angular.json to serve using ssl
  2. update Startup.cs CORS policy to use the new https url
  
LESSON 29. Saving into source control

**** Section 4: Authentication basics ****

LESSON 33. Updating the user entity
  1. added PaswordHash and PasswordSalt to AppUser class.
  2. ran: API>dotnet ef migrations add UserPasswordAdded
  3. Sqlite calls byte array type "BLOB" binary large object
  4. run API>dotnet ef database update
  5. ctrl-shift-P to open command pallete, then choose "SQLite: Open Database", then view sqlite explorer in VSCode explorer to see the new columns
  
LESSON 34. Creating a base API controller
  1. create new class baseAPIcontroller
  2. import a Postman collections
  
LESSON 35. Creating an Account Controller with a register endpoint
  1. create a new class AccountController
  
LESSON 36. Using the debugger
  1. Attach debugger to .Net Core Attach

LESSON 37. Using DTOs
  1. Created RegisterDto class to pass in username and password properties to AccountController class's Register() method
  
LESSON 38. Adding Validation
  1. Created LoginDto class. Created AccountController class's Login() method.
  2. in DatingApp/API> run "dotnet ef database drop" to clean up the user database
  3. run "dotnet ef database update"
  
LESSON 39: Adding a Login endpoint
  1. JWT (json web token)
  
LESSON 40: JSON Web tokens

LESSON 41: Adding a token service
  1. Create Interfaces folder and an interface called TokenService
  2. Create Services folder and a class called TokenService to implement the interface
  3. Add the service to startup.cs. Use AddScoped<> to keep service alive until the http request finishes. AddSingleton<> keeps service alive for lifetime of application. AddTransient<> is disposed as soon
  as the method is finished.
  
LESSON 42. Adding the create token logic
  1. Implement the TokenService class
  2. nuget System.IdentityModel.Tokens.Jwt;
  
LESSON 43. Creating a User DTO and returning the token
1. create new Dto called UserDto
2. Add TokenKey to appsettings.Development.json
3. now we can issue a token with our user login

LESSON 44. Adding the authentication middleware
1. Add [Authorize] to the get user endpoint in UserController.cs
2. nuget Microsoft.AspNetCore.Authentication.JwtBearer

LESSON 45. Adding extension methods
1. Create Extensions folder and ApplicationServiceExtensions and IdentityServiceExtensions
2. stage changes in source control, and commit changes

**** Section 5: Client login and register ****
LESSON 48. Creating a nav bar
1. cd client/src/app
2. > ng generate component nav --skip-tests
3. this will generate a angular component called nav, and not create the test file which is not need for this tutorial
4. goto getbootstrap.com and click Examples
5. click on Carousel and copy the html for the Nav bar
6. Copy it into nav.component.html template
7. then find the selector nav.component.ts which is "app-nav" then add that element tag to app.component.html to make use of it

LESSON 49. Introduction to Angular template forms
1. angular has two-way binding. can take data from a component and display it in a page, or take data from a form element and use it in a components code.
   ( ) means the template is submitting some data to the component
   [ ] the html template is receiving something from the component
   [( )] means we have two-way binding
2. import FormsModule in app.module.ts
3. create a login() method in nav.component.ts 
4. change the form in nav.component.html to an angular form (ngForm)

LESSON 50. Introduction to Angular services
1. create a new folder: \DatingApp\client\src\app\_services
2. in the new folder > ng g  s account --skip-tests
3. setup account.services.ts and add a login() method.

LESSON 51. Injecting services into components
1. build login() method in account.services.ts to make a post request

LESSON 52. Using conditionals to show and remove content
1. Add logout() method to nav.component.ts
2. Add a dropdown and logout option to nav.component.html

LESSON 53. Using the angular bootstrap components - dropdown
1. goto ngx bootstrap and click on dropdowns
2. copy the import code and paste into app.module.ts
3. Add the various dropdown directives to the html elements in nav.component.html

LESSON 54. Introduction to observables

LESSON 55. Persisting the login
1. build out the login() and logout() methods in account.services.ts 
2. create app/_models folder and create file user.ts in the folder
3. add setCurrentUser in app.component.ts

LESSON 56. Using the async pipe
1. in nav.component.ts, replace the loggedIn property with currentUser$ observables
2. replace the ngIf loggedIn statement with "currentUser$ | async" in nav.component.html
3. make accountService public in nav.component.ts so that it can be accessed in nav.component.html

LESSON 57. Adding a home page
1. generate new home angular component
2. src/app> ng g c home --skip-tests

LESSON 58. Adding a register form
1. generate new register angular component
2. src/app> ng g c register --skip-tests

LESSON 59. Parent to child communication
1. in home.component, add this code to pass date to the register component:
   <app-register [usersFromHomeComponent]="users"></app-register>
   
LESSON 60. Child to parent communication
1. in home.component, add this code to pass date to the register component:
   <app-register [usersFromHomeComponent]="users" (cancelRegister)="cancelRegisterMode($event)"></app-register>
2. setting up child to parent communication should take 4 steps
   a. declare the @Output property in the child component
   b . in a child component's method, emit an event using the output property
   c. create a method in the parent component to recieve the event
   d. in the child template, use ng to () output information by calling the parent function
   
LESSON 61. Hooking up the register method to the service
1. in account.service.ts create register method
2. clean up files, remove the user input functionality from the register component, this was just an example
3. source control
   a. stage all changes
   b. give a name "End of section 5"
   c. commit the changes
   d. push to changes to bitbucket
   
*** Section 6: Routing in Angular ****

LESSON 64. Creating some more components
1. create src/app/members/ directory.
2. in there run 'ng g c member-list --skip-tests', 'ng g c member-detail --skip-tests'
3. in src/app/ run 'ng g c lists --skip-tests' and 'ng g c messages --skip-tests'
4. creates the routes in client\src\app\app-routing.module.ts

LESSON 65. Adding the nav links
1. in nav.component.html, remove the href="#", and add 
   routerLink='/members' routerLinkActive='active'
   etc to hook up the links to the router

LESSON 66. Routing in code
1. nav.component.ts
2. use router.navigateByUrl() to route to via code when logging in and out

LESSON 67. Adding a toast service for notifications
1. navigate to client> npm install ngx-toastr
2. version 14.1.0
3. in angular.json, font-awesome and toastr css files to the styles array
4. in app.module.ts, import ToastrModule
5. to test, in nav.component.ts, inject the toastrService and use it in the login() function to display any errors to the screen

LESSON 68. Adding an Angular route guard
1. create a new directory: client/src/app/_guards
2. open terminal in that location and run "ng g guard auth --skip-tests
3. build out auth.guard.ts
4. app-routing.module.ts, add the canActivate and array of guards (just one in this case) to the Routes array  

LESSON 69. Adding a dummy route
1. app-routing.module.ts,add all paths as children so that we can use the same authGaurd to protect all routes

LESSON 70. Adding a new theme 
1. client> npm install bootswatch
2. add  "./node_modules/ngx-bootstrap/datepicker/bs-datepicker.css", to the styles array in angular.json
3. display username in nav bar in nav.component.html using "() as user" and {{user.username | titlecase}}
4. angular pipe used to display titlecase

LESSON 71. Tidying up the app module by using a shared module
1. make new directory client/src/app/_modules
2. _modules> ng g m shared --flat
    modules do not have test files
    
***** Section 7: Error handling *****

LESSON 74. Creating an error controller for testing errors
1. in API/Controllers/ create a new class called BuggyControllers
2. in BuggyControllers.cs, create some methods to return fake bugs, errors

LESSON 75. Handling server errors
1. BuggyControllers.cs, test out putting code in GetServerError() in a Try-Catch block just to see how the exception is handled.

LESSON 76. Exception handling middleware
1. create new folder and class API/Errors/ApiException.cs
2. create new folder and class API/Middleware/ExceptionMiddleware
3. build out ExceptionMiddleware.cs
4. in startup.cs: add "app.UseMiddleware<ExceptionMiddleware>();" to the configure method

LESSON 76. Exception handling middleware
1. create new folder in client src/app/errors
2. in errors > ng g c test-errors --skip-tests
3. client\src\app\errors\test-errors\test-errors.component.ts
   create methods for each type of error
4. add buttons to test-errors.component.html
5. add the root to app-routing.module.ts
6. add a link to the component in nav.component.html

LESSON 78. Adding an error interceptor
1. create folder app/_interceptors
2. _interceptors> ng g interceptor --skip-tests
3. build out error.interceptor.ts
4. add HTTP_INTERCEPTORS to app.module.ts

LESSON 79. Validation errors
1. add "es2019" to the "lib" section to use the latest version of es (js)
2. error.interceptor.ts, return modalStateErrors using the .flat() js function
3. test-errors.component.html, display the validation error response in the browser

LESSON 80. Handling not found
1. in client/src/app/errors> ng g c not-found --skip-tests
2. use not-found.component.html as our not found page
3. app-routing.module.ts, add the route to the not-found component
3. nav.component.ts, remove the error handling from the login method, since we are now handling the error in the error.interceptor

LESSON 81. Adding a server error page
1. src/app/errors> ng g server-error --skip-tests
2. build the server-error.component.ts
3. build out the server-error.component.html for our server error page
4. add /server-error to app-routing.module.ts

**** Section 8: Extending the API ****

LESSON 85. Extending the user entity
1. add properties to Entities/AppUser.cs
2. create Entities/Photo.cs

LESSON 86. Adding a DateTime extension to calculate age
1. create new class in API/Extensions/ called DateTimeExtensions.cs to extend the DateTime class
2. AppUser.cs, add a GetAge() method

LESSON 87. Entity Framework relationships
1. define the relationship between AppUser and Photo in Photo.cs
    hit will make the AppUserId element in Photo non-nullable, and allow cascading deletes when a user is deleted
2. run API> dotnet ef migrations add ExtendedUserEntity
3. run API> dotnet ef database update

LESSON 88. Generating seed data
1. goto www.json-generator.com
2. paste in the file from student desources called: UserSeedData.json
3. or just download the file from student resources and place it in API/Data directory

LESSON 89. Seeding data part one
1. in program.cs, add the code to run the Seed.SeedUsers() method.

LESSON 90. Seeding data part two
1. in API> dotnet ef database drop
2. in API> dotnet watch run
3. in UserController.cs remove allowannonymous from the requests, and just add [Authorize] above the entire UserController class
4. test requests using Postman

LESSON 91. The repository pattern

LESSON 92. Creating a repository
1. Create new interface API/Interfaces/IUserRepository.cs
2. create the implemenatation class in API/Data/UserRepository.cs and use fix to implement interface
3. Add IRepository service to ApplicationServiceExtensions.cs

LESSON 93. Updating the users controller
1. update UsersController to use our new userRepository instead of _context
2. in UserRepository.cs include p.Photos in the response for get user and get users

LESSON 94. Adding a DTO for Members
1. Create API/DTOs/MemberDto
2. chnage the Photo to PhotoDto
3. "generate type in a new file" PhotoDto

LESSON 95. Adding AutoMapper
1. ctrl-shift-P open NuGet gallery
2. search AutoMapper.Extensions.Microsoft.DependencyInjection and click API.csproj and click install
3. create new folder API/Helpers/
4. generate new class API/Helpers/AutoMapperProfiles.cs
5. in ApplicationServiceExtensions.cs, add the automapper as a service, specify the mapper profile assemblies.

LESSON 96. Using AutoMapper
1. in UsersController.cs, replaces user objects with MemberDto class to return user and users
2. Add PhotoUrl property to MemberDto class

LESSON 97. Configuring AutoMapper
1. in AutoMapperProfiles.cs, specify exactly how to map the url of the main photo to PhotoUrl property

LESSON 98. Using AutoMapper queryable extensions
1. We won't handle the mapping in our controllers now, we will let the repository handle it.

*** SECTION 9: Building the User Interface ****

LESSON 102. Creating the member interface
1. copy the user JSON that is returned in postman and paste it into a JSON to TS website
2. covert the JSON to a Type script type to save time
3. create a new file in client _modules folder called member.ts and copy the type in here
4. move the photo type to a new file and import it in the member.ts file

LESSON 103. Adding a member service
1. update api/environments/environment.ts and enviropnment.prod.ts
2. replace the hardcoded string in _services/account.services.ts
3. in /client/src/app/_services
   > ng g s members --skip-tests
4. this creates src/app/_services/members.service.ts
5. create getMembers and getMember in members.service.ts

LESSON 104. Retrieving the list of members
1. build out member-list.component

LESSON 105. Creating member cards
1. in /client/src/app/members
   > ng g c member-card --skip-tests
2. build out member-card.component
3. modify member-list.component to display the member-cards for each user

LESSON 106. Adding some style to the cards
1. add styles to member-card.component.css

LESSON 107. Adding animated buttons
1. add more styles to member-card.component.css

LESSON 108. Using an interceptor to send the token
1.  in /client/src/app/_interceptors
    > ng g interceptor jwt --skip-tests
    this will CREATE src/app/_interceptors/jwt.interceptor.ts (408 bytes)
2. in _services/member-service.ts we can remove the httpOptions from the getMember(s) methods because they are no longer needed
3. provide the JwtInterceptor in app.module.ts

LESSON 109. Routing to the detailed page
1. build out the member-detail.component.ts
2. hookup the user button on the member-card.component.html using the routerLink attribute

LESSON 110. Styling the member detailed page
1. build out the member-detail.component.html
2. build out the member-detail.component.css

LESSON 111. Styling the member detailed page part two
1. use tabs from https://valor-software.com/ngx-bootstrap/#/
2. import (and export) TabsModule in shared.module.ts from ngx-bootstrap
3. add tabs to member-detail.component.html
4. add css stlyes to the angular global styles.css

LESSON 112. Adding a photo gallery
1. run in client> npg install @kolkov/ngx-gallery
   note: this version was giving an error:
   Error: ./node_modules/@kolkov/ngx-gallery/fesm2015/kolkov-ngx-gallery.mjs 2165:6-19
   Can't import the named export 'ɵɵtemplate' from non EcmaScript module (only default export is available)
   So I had to uninstall and install an older version:
   client> npg install @kolkov/ngx-gallery@1.2.3 (this seemed to fix the problem)
2. import/export NgxGalleryModule in shared.module.ts
3. buildout gallery in member-detail.component.ts and html
 
**** Section 10: Updating Resources ****

LESSON 116. Creating a member edit component
1. src/app/members> ng g c member-edit --skip-tests
2. add member/edit to app-routing.module.ts
3. add a routerLink attrib to the existing Edit Profile dropdown option in nav.component.html
4. build out member-edit.component.ts

LESSON 117. Creating the edit template form
1. build out member-edit.component.html and css

LESSON 118. Adding the update functionality
1. build out member-edit.component to add a form and submit button, reset form after submit

LESSON 119. Adding a Can Deactivate route guard
1. create _guards/prevent-unsaved-changes.guard.ts
2. add @HostListener to member-edit.component.ts

LESSON 120. Persisting the changes in the API
1. In API/DTOs create new C# class MemberUpdateDto
2. add this Dto to AutoMapperProfiles.cs
3. add a HttpPut request to UserController.cs called UpdateUser, then user the new DTO to update the user repository 

LESSON 121. Updating the user in the client app1.
1. build out members.service.ts updateMember() method
2. update member-edit.component.ts updateMember() method to acutally call the updateMember() method

LESSON 122. Adding loading indicators
1. npm install ngx-spinner
2. client/src/app/_services/ > ng g s busy --skip-tests
3. client/src/app/_interceptors/ > ng g interceptor loading --skip-tests
4. in app.module.ts, add the new loadingInterceptor to the providers list
5. app.component.html: add the <ngx-spinner> element here so its visible on all pages

LESSON 123. Using the service to store state
1. in member.service.ts and member-list.component.ts
2. create an array of memember to save the members after the first API call, then update as you go along

*** SECTION 11 ***    Adding Photo Upload Functionality

LESSON 126. Cloudinary Account
1. sign up for cloudinary

LESSON 127. Configuring cloudinary in the API
1. with nuget gallery, search cloudinary
2. install CloudiaryDotnet version 1.17.0 and click the API.csproj box before installing
3. use appsettings.json to store cloudinary settings (this file will be loaded in all environments)
4. Create a class API/_Helpers/CloudinarySettings.cs
5. \API\Extensions\ApplicationServiceExtensions.cs, tell system where to find CloudinarySettings config

NOTE: Had to install Eslint on my own, because TSLint is now depricated
1. DatingApp> npm install --save-dev eslint  @typescript-eslint/parser @typescript-eslint/eslint-plugin

NOTE: Upgrading to ASP.NET CORE v6.0.5
1. https://docs.microsoft.com/en-us/aspnet/core/migration/50-to-60?view=aspnetcore-6.0&tabs=visual-studio
2. watched LESSON 261. How to update .Net 5 to .Net 6
3. updated dotnet to 6.0 in API.csproj, used nuget gallery to get latest version of all the dependencies in this file 
4. ran npm install to reload all the angular dependencies and node_modules (node_modules are ignored by git)
5. I had to install VisualStudio 2022 and select MSBuild in individual components to install to get the latest MSBuild tools
THIS FINALLY FIXED OmniSharp and intellisense in the API app in VS Code!!!!!!

LESSON 128. Adding a photo service
1. this service should have only 1 job (single responsibility)
2. create interface IPhotoService and service PhotoService and implement class
3. add new service to ApplicationServiceExtensions.cs

LESSON 129. Updating the users controller
1. UsersController.cs, add a new methof called AddPhoto
2. create new Extensions/ClaimsPrincipalExtensions to hold a helper method called GetUsername to the User to make it easier to get

LESSON 130. Testing the photo upload
1. when starting debugger, i think the server should not be running, then choose debug attach, then look for API.exe in the list to attach.
2. if that does not work, then do dotnet watch run and try it

LESSON 131. Using the Created At Route method
1. in UsersController.cs, modified AddPhoto() method so that it will return a 201 Created request instead of a 200 OK 

LESSON 132. Adding a photo editor component
1. in client/src/app/members> ng g c photo-editor --skip-tests
2. add the <app-photo-editor> component to the member-list.component.html

LESSON 133. Adding a photo uploader
1. goto https://valor-software.com/ng2-file-upload/
2. in client> npm install ng2-file-upload
3. copy paste html module into photo-editor.component.html
4. Add FileUploadModule to shared.module.ts import and export
5. add the FileUploader to photo-editor.component.ts and build out file manually, instead of copying the setup from valor-software site documentation.

LESSON 134. Adding a photo uploader part two
1. build out \photo-editor.component.html, remove unwanted stuff, don't need upload bar for every image, just upload all progress bar
2. style in photo-editor.component.css, remove text next to browse, add padding

LESSON 135. Setting the main photo in the API
1. UserControllers.cs
2. add SetMainPhoto() method

LESSON 136. Adding the main photo image to the nav bar
1. add a new property called photoUrl, update the following files:
  UserDto.cs, AccountControllers.cs, and user.ts, nav.component.html
  
LESSON 137. Setting the main photo in the client
1. members.service.ts: create setMainPhoto() method that triggers the http put request
2. photo-editor.component.ts: create a setMainPhoto() method that updates the user observable
3. photo-editor.component.html: disable the button if the photo is main, set up the click event, also change the css class depending on isMain

LESSON 138. Deleting photos - API
1. UsersController.cs DeletePhoto() method and create a HttpDelete request endpoint

LESSON 139. Deleting photos - Client
1. members.services.ts: create a deletePhoto() method that makes a http delete request to a url endpoint
2. photo-editor.component.ts: create a deletePhoto() method, that calls the member.services method and updates the member.photos
3. add click event to the delete button in photo-editor.component.html

**** Section 12: Reactive Forms ****

LESSON 142. Reactive forms introduction
1. app.module.ts: import ReactiveFormsModule
2. register.component.ts: create registerForm property and create initializeForm() method
3. register.component.html: convert the template form to a reactive form

LESSON 143. Client side validation
1. register.component.ts: add validators to FormControls

LESSON 144. Adding custom validators
1. register.component.ts: create custom validator called matchValues()

LESSON 145. Validation feedback
1. register.component.html : add class.isValid attribute to input fields
2. use div to display invalid-feedback
3. use ngIf to check multiple errors for multiple feed back options

LESSON 146. Creating a reusable text input
1. create new folder _forms in client/src/app
2. _forms> ng g c text-input --skip-tests
3. implement text-input.component.ts
4. copy one of the form inputs from register.component.html into text-input.component.html and make it into a generic input template 

LESSON 147. Using the form builder service
1. register.component.ts: inject formBuilder to simplify code
2. simplify the code in initializeCode using fb

LESSON 148. Expanding the register form
1. register.component.ts: add more fields to initializeForm() method
2. register.component.html: add more fields to the registration form

LESSON 149. Adding a reusable date input
1. shared.module.ts: import BsDatepickerModule
2. _forms> ng g c date-input --skip-tests
3. date-input.component.ts: inport BsDatepickerConfig
4. date-input.component.html build out the reuseable input
5. register.component.html: now we can change the dateOfBirth to a <app-date-input>
6. register.component.ts: create a new property called maxDate to make sure user cannot enter a date less than 18 years ago

LESSON 150. Updating the API register method
1. API/DTOs/RegisterDto.cs: add more fields
2. API\Helpers\AutoMapperProfiles.cs: added CreateMap<RegisterDto, AppUser>();
3. AccountContoller.cs: bring in IMapper, use it to map RegisterDto to AppUser. Add the KnownAs property
4. UserDto: Add KnownAs property

LESSON 151. Client side registration
1. RegisterComponent.ts: Inject Router
2. create property called validationErrors
3. RegisterComponent.html: Add class text-danger error message

*** SECTION 13 ***    Paging, Sorting, Filtering

LESSON 152. Adding a paged list class
1. API/helpers/ create new class called PagedList
2. Build out PagedList.cs to handle objects of any type]

LESSON 153. Adding helper classes for pagination
1. create new class API/helpers/PaginationHeader
2. create new class API/extensions/HttpExtensions
3. create new class API/helpers/UserParams

LESSON 154. Using the pagination classes
1. IUserRepository.cs, return PagedList in GetMembersAsync now instead of IEnumberable
2. update UserRepository and UserController
3. HttpExtension: Added JsonSerializerOptions to return header json in camelCase

LESSON 155. Setting up client pagination
1. client/src/app/models> create a new file called pagination.ts
2. members.service.ts:  update getMembers to use pagination
3. member-list.component.ts: update loadMembers to use pagination
4. member-list.component.html: member of members$ to member of members to match members.service.ts interface

LESSON 156. Using the angular bootstrap pagination component
1. shared.module.ts: import PaginationModule from ngx-bootstrap
2. member-list.component.html: add the pagination module, add our attributes from our pagination interface
3. member-list.component.ts: added pageChanged() method because its called from the pagination module

LESSON 157. Adding filtering to the API
1. UserParams.cs : added CurrenUsername and Gender parameters
2. UserController.cs: Do a check for gender preference in the GetUsers() function to filter the results on gender 
3. UserRepository.cs: Filter out user's profile and filter by gender in the GetMembersAsync() method.

LESSON 158. Adding additional filters
1. UserParams.cs: added MinAge and MaxAge
2. UserRepository.cs: Filter out filter by DOB(age) in the GetMembersAsync() method.

LESSON 159. Cleaning up the member service

LESSON 160. Adding filter buttons to the client
1. member-list.component.html: added the filter elements to this page

LESSON 161. Adding sorting functionality

LESSON 162. Adding an action filter

LESSON 163. Making the Last Active action filter more optimal

LESSON 164. Sorting on the client

LESSON 165. Formatting dates
1. install timeagoModule
2. client> npm install ngx-timeago --legacy-peer-deps

LESSON 166. Restoring the caching for members

LESSON 167. Restoring caching for member detailed

LESSON 168. Remembering the filters for a user in the service

*** SECTION 14: Adding the Like User Feature

LESSON 171. Adding a likes entity

1. API/Entities/UserLike.cs

LESSON 172. Adding a likes repository

LESSON 173. Implementing the likes repository
1. implement LikedRepository.cs

LESSON 174. Controller methods for the likes feature

LESSON 175. Setting up the likes functions in the Angular app

LESSON 176. Adding the likes component

LESSON 177. Adding pagination for the likes

LESSON 178. Paginating the likes on the client

*** SECTION 15: Adding the messaging feature ****

LESSON 181. Setting up the entities for messaging
1. dotnet ef migrations add MessageEntityAdded

LESSON 182. Setting up the message repository
1. IMessageRepository

LESSON 183. Setting up the automapper profiles

LESSON 184. Adding a message controller
1. latest version of omnisharp broke intellisence, so i had to let omnisharp in settings to use 1.39.2

LESSON 185. Getting the messages from the Repo

LESSON 186. Getting the message thread for 2 users

LESSON 187. Setting up the Angular app for messaging

LESSON 188. Designing the inbox

LESSON 189. Adding the message thread in the client

LESSON 190. Styling the message thread

LESSON 191. Activating the message tab

LESSON 192. Using query params

LESSON 193. Using route resolvers
1. updated to .dotnet 7 and angular 14

LESSON 194. Sending messages

LESSON 195. Fixing the photo weirdness

LESSON 196. Deleting messages on the API

LESSON 197. Deleting messages on the client

LESSON 198. Section 15 summary

*** SECTION 16: Identity and Role Management ****

LESSON 199. Introduction

LESSON 200. Setting up the entities
1. in VS ode settings, had to set omnisharp to UseModernNet: false, because it could net recognize IdentityUser package
2. API/Entity/AppRole.cs
3. API/Entity/AppUserRole.cs

LESSON 201. Configuring the DbContext

LESSON 202. Configuring the startup class

LESSON 203. Refactoring and adding a new migration

LESSON 204. Updating the seed method
1. drop database

LESSON 205. Updating the account controller

LESSON 206. Adding roles to the app

LESSON 207. Adding the roles to the JWT token

LESSON 208. Adding policy based authorisation

LESSON 209. Getting the users with roles
1. AdminControllers.cs

LESSON 210. Editing user roles

LESSON 211. Adding an admin component
1. client> ng g c admin/admin-panel --skip-tests

LESSON 212. Adding an admin guard
1. client> ng g guard _guards/admin --skip-tests
  CanActivate = Y   This basically means does the user have access to this route
  
LESSON 213. Adding a custom directive
1. ng g d _directives/has-role --skip-tests

LESSON 214. Adding the edit roles component

LESSON 215. Setting up modals
1. got a compile error for angular in user-management.component.ts regarding bsModalRef. used a work around. not sure if it will cause problems
   Eventually ended up reinstalling bootstrap, bootswatch, and ngx-bootstrap to current versions which seemed to fix the issues.

LESSON 216. Editing roles in the client

LESSON 217. Editing roles part two

LESSON 218: Summary

*** SECTION 17: SignalR ****

LESSON 219. Introduction
1.Updated Angular from 14.2.10 to 14.2.11 to fix:
Error: node_modules/ng2-file-upload/file-upload/file-select.directive.d.ts:14:18 - error TS2707: Generic type 'ɵɵDirectiveDeclaration' requires between  6 and 8 type arguments.

LESSON 220. Adding a presence hub

LESSON 221. Authenticating to SignalR

LESSON 222. Client side SignalR

LESSON 223. Adding a presence tracker

LESSON 224. Displaying online presence

LESSON 225. Creating a message hub

LESSON 226. Adding the send message method to the hub

LESSON 227. Adding the hub connection to the message service

LESSON 228. Refactoring the message components to use the hub

LESSON 229. Sending messages via the hub

LESSON 230. Tracking the message groups
1. Created new class API\Entities\Group.cs
2. dotnet ef migrations add GroupsAdded

LESSON 231. Updating the message hub with group tracking

LESSON 232. Dealing with UTC date formats

LESSON 233. Notifying users when they receive a message

LESSON 234. Optimizing the presence

LESSON 235. Optimizing the messages

LESSON 236. Section 17 summary

*** SECTION 18: Unit of Work patter and finishing touches

LESSON 237. Introduction

LESSON 238. Implementing the unit of work

LESSON 239. Refactoring the controllers to use the unit of work

LESSON 240. Optimizing queries part one

LESSON 241. Optimizing queries part two

LESSON 242. Adding a confirmation service to the angular app
1. client> ng g s _services/confirm --skip-tests
2. client> ng g c modals/confirm-dialog --skip-tests

LESSON 243. Getting the data from the confirmation modal

LESSON 244. Tidying up the member message component

LESSON 245. Section 18 summary

LESSON 246. Photo management challenge

LESSON 247. Introduction

*** SECTION 19: Publishing

LESSON 247. Introduction

LESSON 248. Preparing the angular app and serving this from the API
1. remove hardcoded urls, use environment.apiUrl
2. angular.json: "outputPath": "../API/wwwroot"
3. program.cs: app.UseAuthentication(), app.UseAuthorization()
4. client> ng build
 
LESSON 249. Adding a fallback controller
1. API>Controllers> FallbackController

LESSON 250. Creating an angular production build
1. if you make any changes to your code, you will need to run "ng build" afterwards

LESSON 251. Switching the DB Server to PostGres
1. install Docker. Use Hyper-V backend because WSL required me to update my machines kernel.
2. datingapp> docker run --name postgres -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d postgres:latest
   -e is for environment variable, USE SIMPLE PASSWORDS docker doesnt like complex, -p is port, -d is detached mode (not interactive)
3. install vscode extension: PostgreSQL

LESSON 252. Changing the DB Server in our app
1. use nuget gallery to install: Npgsql.EntityFrameworkCore.PostgreSQL
2. update: appsettings.Development.json, old connection string was "DefaultConnection": "Data source=datingapp.db", because Sqlite uses a simple file for database
3. API> dotnet ef datbase drop
4. delete Migrations folder
5. API> dotnet ef migrations add PostgresInitial -o Data/Migrations

LESSON 253. Dockerizing our app
1. change our .net app into a Docker image, then deploy that image to Fly.io(free alternative to Heroku postgres DB)
2. install Docker extension to vs code.
3. sign up for free docker account username: macross2
4. create docker image macross2/datingapp
5. API> docker build -t macross2/datingapp .
6. API> docker run --rm -it -p 8080:80 macross2/datingapp:latest
7. this was mainly to test docker container by running it locally on 8080, but next we will deploy it via fly.io

LESSON 254. Updating the config to use Postgres
1. appsettings.json is still not part of our github repository, we will be doing something different for production.

LESSON 255. Creating a deployment to fly io
1. install fly via command line> 
   fly only works via my regular windows command prompt
2. datingapp> fly launch --image macross2/datingapp:latest
3. fly.toml
3. datingapp> fly secrets set ...

LESSON 256. Creating the config variables for fly io
1. update Program.cs
2. build docker, push docker image
3. datingapp> docker login
3.  datingapp> fly deploy

LESSON 257. Using github actions
1. github.com/docker/build-push-action
2. new folder
   .github/workflows/docker-push.yml
3. add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN via github website repository > actions > secrets
4. from github site, run workflow
    this should give you an active url where app is running

LESSON 258. Fixing the issues with the message thread

LESSON 259. Automating the deployment


SETUP NOTES ( after cloning project into new environment):
1. install dotnet sdk 7
2. datingapp> dotnet dev-certs https --trust
3. extensions: nuget gallery
  a. install microsoft.entityframeworkcore.sqlite
  b. install microsoft.entityframeworkcore.design
4. API> dotnet tool install --global dotnet-ef --version 7.0.9
5. API> dotnet ef database update
6. datingapp> npm install -g @angular/cli@16
  a. had to make sure version of angular was compatible with version of node
8. admin> set-ExecutionPolicy RemoteSigned -Scope CurrentUser
9. admin> Get-ExecutionPolicy
  a. need this so that i can actually run the ng scripts
10. Error: Could not find the '@angular-devkit/build-angular:dev-server' builder's node package.
  a. had to uninstall/reinstall build-angular
  b. npm uninstall @angular-devkit/build-angular
  c. npm install --save-dev @angular-devkit/build-angular
11. install docker desktop onto my windows machine
  a. docker desktop unable to run on my machine because Hyper-V not avaible option on windows 10 personal
  b. use WSL, enable it in windows settings and install via powershell
12. install vs code extension: postgresql by Chris Kolkman
13. install vs code extension: docker
14. datingapp> docker run --name postgres -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d postgres:latest
15. API> docker run --rm -it -p 8080:80 macross2/datingapp:latest
  a. Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.
16. powershell> powershell -Command "iwr https://fly.io/install.ps1 -useb | iex"
  a. run this in a powershell command window to install fly.io
16. DatingApp> C:\Users\robot\.fly\bin\flyctl.exe auth login
17. Datingapp> C:\Users\robot\.fly\bin\fly.exe deploy
  a. adding fly to path is not working
  b. removed current fly by deleting the folder C:\Users\robot\.fly
  c. reinstalled using powerscript from fly.io install page: DatingApp> iwr https://fly.io/install.ps1 -useb | iex
  d. now im able to use fly and flyctl commands
18. API> docker build -t macross2/datingapp .
19. docker run --rm -it -p 8080:80 macross2/datingapp:latest
  a. got error in Program.cs, i think its because DATABASE_URL does not exist.
  b. im going to redo Lesson 255: changing the database 
22. DatingApp> fly launch --image macross2/datingapp:latest
23. next had to copy my old appsettings.json file because it was ignored and not in the repository
24. updated fly.toml
25. DatingApp> fly secrets set CloudinarySettings__ApiSecret=pGW6W5WgiT9eaITCZvysQLGWpZ4
26. generate a new password for TokenKey using generator
  a. DatingApp> fly secrets set TokenKey=jcQBVW6MsvErRf4wTLmDDK4vZpcIqsZG
27. API> docker build -t macross2/datingapp .
28. API> docker push macross2/datingapp:latest
29. datingapp> fly deploy

How to run app on local machine with new postgres database running in a docker container
NOTE: We will use the appsettings.json file 
1. open docker desktop
2. datingapp> docker run --name postgres -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d postgres:latest
3. API> dotnet run

Production release to Fly.io:
NOTE: The error in program.cs when running prod version of app was caused by not setting up the DB when i ran fly launch.
1. We will NOT use the appsettings.json file (we wont be using this for full production release via fly). When we launch to fly, we choose to setup a DB
  and fly creates the database on its servers, it returns a DATABASE_URL, that is then read in program.cs when we run the app.
 a. make sure this line is in the json file:
 b. "DefaultConnection": "Server=host.docker.internal; Port=5432; User Id=postgres; Password=postgrespw; Database=datingapp"
2. DatingApp> fly launch --image macross2/datingapp:latest
  a. choose to setup database
  b. choose the development option (free, 1 machine)
  c. choose N to Redis
    Postgres cluster little-flower-981-db created
    Username:    postgres
    Password:    lt8WMgAWC3SOlGr
    Hostname:    little-flower-981-db.internal
    Flycast:     fdaa:2:40d5:0:1::4
    Proxy port:  5432
    Postgres port:  5433
    Connection string: postgres://postgres:lt8WMgAWC3SOlGr@little-flower-981-db.flycast:5432
  d. update the fly.toml file by includeing the env variables
  e. update Dockerfile by  exposing port 8080
3. DatingApp> fly secrets set CloudinarySettings__ApiSecret=pGW6W5WgiT9eaITCZvysQLGWpZ4
4. DatingApp> fly secrets set TokenKey=jcQBVW6MsvErRf4wTLmDDK4vZpcIqsZG
5. API> docker build -t macross2/datingapp .
6. API> docker push macross2/datingapp:latest
7. DatingApp> fly deploy  (success!! finally)



DEPLOYMENT NOTES:
1. For production, we will host the angular app from the API server. we could host the 2 apps from different servers if we wanted.
  a. configure API to serve static files in program.cs
2. to create a production build for angular (this will create an executable with smaller file size because it strips out compilers and stuff)
  a. client> ng build
  b. this creates the angular app inside the wwwroot folder in the API

Current Development Setup:
1. Hook up the API to use Sqlite (Postrges requires docker desktop to be running, and that takes a long time)
  drop the database, delete the migrations folder, update appseting.Developmetn.json, Program.cs, ApplicationServiceExtensions
2. Angular continues to run bundled with the API and on the same local server, but I am also able to run >ng serve now so that it runs on
   https://localhost:4200 ( i had to do lesson 28, install choco, install mkcert, and create new certificates, this seemed to fix it.). Now i can 
   run the api, and the front end runs on both 5001 and 4200 ports simultaneouly, of course >ng serve is faster because i dont have to ng build everytime
